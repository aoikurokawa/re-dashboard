/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";

/**
 * Arguments used to create {@link Ncn}
 * @category Accounts
 * @category generated
 */
export type NcnArgs = {
  base: web3.PublicKey;
  admin: web3.PublicKey;
  operatorAdmin: web3.PublicKey;
  vaultAdmin: web3.PublicKey;
  slasherAdmin: web3.PublicKey;
  delegateAdmin: web3.PublicKey;
  metadataAdmin: web3.PublicKey;
  weightTableAdmin: web3.PublicKey;
  ncnProgramAdmin: web3.PublicKey;
  index: beet.bignum;
  operatorCount: beet.bignum;
  vaultCount: beet.bignum;
  slasherCount: beet.bignum;
  bump: number;
  reserved: number[] /* size: 263 */;
};
/**
 * Holds the data for the {@link Ncn} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Ncn implements NcnArgs {
  private constructor(
    readonly base: web3.PublicKey,
    readonly admin: web3.PublicKey,
    readonly operatorAdmin: web3.PublicKey,
    readonly vaultAdmin: web3.PublicKey,
    readonly slasherAdmin: web3.PublicKey,
    readonly delegateAdmin: web3.PublicKey,
    readonly metadataAdmin: web3.PublicKey,
    readonly weightTableAdmin: web3.PublicKey,
    readonly ncnProgramAdmin: web3.PublicKey,
    readonly index: beet.bignum,
    readonly operatorCount: beet.bignum,
    readonly vaultCount: beet.bignum,
    readonly slasherCount: beet.bignum,
    readonly bump: number,
    readonly reserved: number[] /* size: 263 */,
  ) {}

  /**
   * Creates a {@link Ncn} instance from the provided args.
   */
  static fromArgs(args: NcnArgs) {
    return new Ncn(
      args.base,
      args.admin,
      args.operatorAdmin,
      args.vaultAdmin,
      args.slasherAdmin,
      args.delegateAdmin,
      args.metadataAdmin,
      args.weightTableAdmin,
      args.ncnProgramAdmin,
      args.index,
      args.operatorCount,
      args.vaultCount,
      args.slasherCount,
      args.bump,
      args.reserved,
    );
  }

  /**
   * Deserializes the {@link Ncn} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [Ncn, number] {
    return Ncn.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Ncn} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Ncn> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find Ncn account at ${address}`);
    }
    return Ncn.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "RestkWeAVL8fRGgzhfeoqFhsqKRchg6aa1XrcH96z4Q",
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, ncnBeet);
  }

  /**
   * Deserializes the {@link Ncn} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Ncn, number] {
    return ncnBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Ncn} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return ncnBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Ncn}
   */
  static get byteSize() {
    return ncnBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Ncn} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Ncn.byteSize,
      commitment,
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Ncn} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Ncn.byteSize;
  }

  /**
   * Returns a readable version of {@link Ncn} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      base: this.base.toBase58(),
      admin: this.admin.toBase58(),
      operatorAdmin: this.operatorAdmin.toBase58(),
      vaultAdmin: this.vaultAdmin.toBase58(),
      slasherAdmin: this.slasherAdmin.toBase58(),
      delegateAdmin: this.delegateAdmin.toBase58(),
      metadataAdmin: this.metadataAdmin.toBase58(),
      weightTableAdmin: this.weightTableAdmin.toBase58(),
      ncnProgramAdmin: this.ncnProgramAdmin.toBase58(),
      index: (() => {
        const x = <{ toNumber: () => number }>this.index;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      operatorCount: (() => {
        const x = <{ toNumber: () => number }>this.operatorCount;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      vaultCount: (() => {
        const x = <{ toNumber: () => number }>this.vaultCount;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      slasherCount: (() => {
        const x = <{ toNumber: () => number }>this.slasherCount;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      bump: this.bump,
      reserved: this.reserved,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const ncnBeet = new beet.BeetStruct<Ncn, NcnArgs>(
  [
    ["base", beetSolana.publicKey],
    ["admin", beetSolana.publicKey],
    ["operatorAdmin", beetSolana.publicKey],
    ["vaultAdmin", beetSolana.publicKey],
    ["slasherAdmin", beetSolana.publicKey],
    ["delegateAdmin", beetSolana.publicKey],
    ["metadataAdmin", beetSolana.publicKey],
    ["weightTableAdmin", beetSolana.publicKey],
    ["ncnProgramAdmin", beetSolana.publicKey],
    ["index", beet.u64],
    ["operatorCount", beet.u64],
    ["vaultCount", beet.u64],
    ["slasherCount", beet.u64],
    ["bump", beet.u8],
    ["reserved", beet.uniformFixedSizeArray(beet.u8, 263)],
  ],
  Ncn.fromArgs,
  "Ncn",
);
