/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";

/**
 * Arguments used to create {@link Operator}
 * @category Accounts
 * @category generated
 */
export type OperatorArgs = {
  base: web3.PublicKey;
  admin: web3.PublicKey;
  ncnAdmin: web3.PublicKey;
  vaultAdmin: web3.PublicKey;
  delegateAdmin: web3.PublicKey;
  metadataAdmin: web3.PublicKey;
  voter: web3.PublicKey;
  index: beet.bignum;
  ncnCount: beet.bignum;
  vaultCount: beet.bignum;
  operatorFeeBps: number;
  bump: number;
  reservedSpace: number[] /* size: 261 */;
};
/**
 * Holds the data for the {@link Operator} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Operator implements OperatorArgs {
  private constructor(
    readonly base: web3.PublicKey,
    readonly admin: web3.PublicKey,
    readonly ncnAdmin: web3.PublicKey,
    readonly vaultAdmin: web3.PublicKey,
    readonly delegateAdmin: web3.PublicKey,
    readonly metadataAdmin: web3.PublicKey,
    readonly voter: web3.PublicKey,
    readonly index: beet.bignum,
    readonly ncnCount: beet.bignum,
    readonly vaultCount: beet.bignum,
    readonly operatorFeeBps: number,
    readonly bump: number,
    readonly reservedSpace: number[] /* size: 261 */,
  ) {}

  /**
   * Creates a {@link Operator} instance from the provided args.
   */
  static fromArgs(args: OperatorArgs) {
    return new Operator(
      args.base,
      args.admin,
      args.ncnAdmin,
      args.vaultAdmin,
      args.delegateAdmin,
      args.metadataAdmin,
      args.voter,
      args.index,
      args.ncnCount,
      args.vaultCount,
      args.operatorFeeBps,
      args.bump,
      args.reservedSpace,
    );
  }

  /**
   * Deserializes the {@link Operator} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [Operator, number] {
    return Operator.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Operator} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Operator> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find Operator account at ${address}`);
    }
    return Operator.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "RestkWeAVL8fRGgzhfeoqFhsqKRchg6aa1XrcH96z4Q",
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, operatorBeet);
  }

  /**
   * Deserializes the {@link Operator} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Operator, number] {
    return operatorBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Operator} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return operatorBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Operator}
   */
  static get byteSize() {
    return operatorBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Operator} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Operator.byteSize,
      commitment,
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Operator} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Operator.byteSize;
  }

  /**
   * Returns a readable version of {@link Operator} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      base: this.base.toBase58(),
      admin: this.admin.toBase58(),
      ncnAdmin: this.ncnAdmin.toBase58(),
      vaultAdmin: this.vaultAdmin.toBase58(),
      delegateAdmin: this.delegateAdmin.toBase58(),
      metadataAdmin: this.metadataAdmin.toBase58(),
      voter: this.voter.toBase58(),
      index: (() => {
        const x = <{ toNumber: () => number }>this.index;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      ncnCount: (() => {
        const x = <{ toNumber: () => number }>this.ncnCount;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      vaultCount: (() => {
        const x = <{ toNumber: () => number }>this.vaultCount;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      operatorFeeBps: this.operatorFeeBps,
      bump: this.bump,
      reservedSpace: this.reservedSpace,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const operatorBeet = new beet.BeetStruct<Operator, OperatorArgs>(
  [
    ["base", beetSolana.publicKey],
    ["admin", beetSolana.publicKey],
    ["ncnAdmin", beetSolana.publicKey],
    ["vaultAdmin", beetSolana.publicKey],
    ["delegateAdmin", beetSolana.publicKey],
    ["metadataAdmin", beetSolana.publicKey],
    ["voter", beetSolana.publicKey],
    ["index", beet.u64],
    ["ncnCount", beet.u64],
    ["vaultCount", beet.u64],
    ["operatorFeeBps", beet.u16],
    ["bump", beet.u8],
    ["reservedSpace", beet.uniformFixedSizeArray(beet.u8, 261)],
  ],
  Operator.fromArgs,
  "Operator",
);
