/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number };
type MaybeErrorWithCode = ErrorWithCode | null | undefined;

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map();
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map();

/**
 * BadEpochLength: 'Bad epoch length'
 *
 * @category Errors
 * @category generated
 */
export class BadEpochLengthError extends Error {
  readonly code: number = 0x0;
  readonly name: string = "BadEpochLength";
  constructor() {
    super("Bad epoch length");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, BadEpochLengthError);
    }
  }
}

createErrorFromCodeLookup.set(0x0, () => new BadEpochLengthError());
createErrorFromNameLookup.set(
  "BadEpochLength",
  () => new BadEpochLengthError(),
);

/**
 * NcnOperatorAdminInvalid: 'NcnOperatorAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class NcnOperatorAdminInvalidError extends Error {
  readonly code: number = 0x3e8;
  readonly name: string = "NcnOperatorAdminInvalid";
  constructor() {
    super("NcnOperatorAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnOperatorAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x3e8, () => new NcnOperatorAdminInvalidError());
createErrorFromNameLookup.set(
  "NcnOperatorAdminInvalid",
  () => new NcnOperatorAdminInvalidError(),
);

/**
 * NcnCooldownOperatorFailed: 'NcnCooldownOperatorFailed'
 *
 * @category Errors
 * @category generated
 */
export class NcnCooldownOperatorFailedError extends Error {
  readonly code: number = 0x3e9;
  readonly name: string = "NcnCooldownOperatorFailed";
  constructor() {
    super("NcnCooldownOperatorFailed");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnCooldownOperatorFailedError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x3e9,
  () => new NcnCooldownOperatorFailedError(),
);
createErrorFromNameLookup.set(
  "NcnCooldownOperatorFailed",
  () => new NcnCooldownOperatorFailedError(),
);

/**
 * NcnSlasherAdminInvalid: 'NcnSlasherAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class NcnSlasherAdminInvalidError extends Error {
  readonly code: number = 0x3ea;
  readonly name: string = "NcnSlasherAdminInvalid";
  constructor() {
    super("NcnSlasherAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnSlasherAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x3ea, () => new NcnSlasherAdminInvalidError());
createErrorFromNameLookup.set(
  "NcnSlasherAdminInvalid",
  () => new NcnSlasherAdminInvalidError(),
);

/**
 * NcnVaultAdminInvalid: 'NcnVaultAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class NcnVaultAdminInvalidError extends Error {
  readonly code: number = 0x3eb;
  readonly name: string = "NcnVaultAdminInvalid";
  constructor() {
    super("NcnVaultAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnVaultAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x3eb, () => new NcnVaultAdminInvalidError());
createErrorFromNameLookup.set(
  "NcnVaultAdminInvalid",
  () => new NcnVaultAdminInvalidError(),
);

/**
 * NcnAdminInvalid: 'NcnAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class NcnAdminInvalidError extends Error {
  readonly code: number = 0x3ec;
  readonly name: string = "NcnAdminInvalid";
  constructor() {
    super("NcnAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x3ec, () => new NcnAdminInvalidError());
createErrorFromNameLookup.set(
  "NcnAdminInvalid",
  () => new NcnAdminInvalidError(),
);

/**
 * NcnDelegateAdminInvalid: 'NcnDelegateAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class NcnDelegateAdminInvalidError extends Error {
  readonly code: number = 0x3ed;
  readonly name: string = "NcnDelegateAdminInvalid";
  constructor() {
    super("NcnDelegateAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnDelegateAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x3ed, () => new NcnDelegateAdminInvalidError());
createErrorFromNameLookup.set(
  "NcnDelegateAdminInvalid",
  () => new NcnDelegateAdminInvalidError(),
);

/**
 * NcnVaultSlasherTicketFailedCooldown: 'NcnVaultSlasherTicketFailedCooldown'
 *
 * @category Errors
 * @category generated
 */
export class NcnVaultSlasherTicketFailedCooldownError extends Error {
  readonly code: number = 0x3ee;
  readonly name: string = "NcnVaultSlasherTicketFailedCooldown";
  constructor() {
    super("NcnVaultSlasherTicketFailedCooldown");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnVaultSlasherTicketFailedCooldownError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x3ee,
  () => new NcnVaultSlasherTicketFailedCooldownError(),
);
createErrorFromNameLookup.set(
  "NcnVaultSlasherTicketFailedCooldown",
  () => new NcnVaultSlasherTicketFailedCooldownError(),
);

/**
 * NcnVaultTicketFailedCooldown: 'NcnVaultTicketFailedCooldown'
 *
 * @category Errors
 * @category generated
 */
export class NcnVaultTicketFailedCooldownError extends Error {
  readonly code: number = 0x3ef;
  readonly name: string = "NcnVaultTicketFailedCooldown";
  constructor() {
    super("NcnVaultTicketFailedCooldown");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnVaultTicketFailedCooldownError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x3ef,
  () => new NcnVaultTicketFailedCooldownError(),
);
createErrorFromNameLookup.set(
  "NcnVaultTicketFailedCooldown",
  () => new NcnVaultTicketFailedCooldownError(),
);

/**
 * NcnWarmupOperatorFailed: 'NcnWarmupOperatorFailed'
 *
 * @category Errors
 * @category generated
 */
export class NcnWarmupOperatorFailedError extends Error {
  readonly code: number = 0x3f0;
  readonly name: string = "NcnWarmupOperatorFailed";
  constructor() {
    super("NcnWarmupOperatorFailed");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnWarmupOperatorFailedError);
    }
  }
}

createErrorFromCodeLookup.set(0x3f0, () => new NcnWarmupOperatorFailedError());
createErrorFromNameLookup.set(
  "NcnWarmupOperatorFailed",
  () => new NcnWarmupOperatorFailedError(),
);

/**
 * NcnVaultSlasherTicketFailedWarmup: 'NcnVaultSlasherTicketFailedWarmup'
 *
 * @category Errors
 * @category generated
 */
export class NcnVaultSlasherTicketFailedWarmupError extends Error {
  readonly code: number = 0x3f1;
  readonly name: string = "NcnVaultSlasherTicketFailedWarmup";
  constructor() {
    super("NcnVaultSlasherTicketFailedWarmup");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnVaultSlasherTicketFailedWarmupError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x3f1,
  () => new NcnVaultSlasherTicketFailedWarmupError(),
);
createErrorFromNameLookup.set(
  "NcnVaultSlasherTicketFailedWarmup",
  () => new NcnVaultSlasherTicketFailedWarmupError(),
);

/**
 * NcnVaultTicketFailedWarmup: 'NcnVaultTicketFailedWarmup'
 *
 * @category Errors
 * @category generated
 */
export class NcnVaultTicketFailedWarmupError extends Error {
  readonly code: number = 0x3f2;
  readonly name: string = "NcnVaultTicketFailedWarmup";
  constructor() {
    super("NcnVaultTicketFailedWarmup");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnVaultTicketFailedWarmupError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x3f2,
  () => new NcnVaultTicketFailedWarmupError(),
);
createErrorFromNameLookup.set(
  "NcnVaultTicketFailedWarmup",
  () => new NcnVaultTicketFailedWarmupError(),
);

/**
 * OperatorNcnAdminInvalid: 'OperatorNcnAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class OperatorNcnAdminInvalidError extends Error {
  readonly code: number = 0x7d0;
  readonly name: string = "OperatorNcnAdminInvalid";
  constructor() {
    super("OperatorNcnAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, OperatorNcnAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x7d0, () => new OperatorNcnAdminInvalidError());
createErrorFromNameLookup.set(
  "OperatorNcnAdminInvalid",
  () => new OperatorNcnAdminInvalidError(),
);

/**
 * OperatorVaultAdminInvalid: 'OperatorVaultAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class OperatorVaultAdminInvalidError extends Error {
  readonly code: number = 0x7d1;
  readonly name: string = "OperatorVaultAdminInvalid";
  constructor() {
    super("OperatorVaultAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, OperatorVaultAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x7d1,
  () => new OperatorVaultAdminInvalidError(),
);
createErrorFromNameLookup.set(
  "OperatorVaultAdminInvalid",
  () => new OperatorVaultAdminInvalidError(),
);

/**
 * OperatorAdminInvalid: 'OperatorAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class OperatorAdminInvalidError extends Error {
  readonly code: number = 0x7d2;
  readonly name: string = "OperatorAdminInvalid";
  constructor() {
    super("OperatorAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, OperatorAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x7d2, () => new OperatorAdminInvalidError());
createErrorFromNameLookup.set(
  "OperatorAdminInvalid",
  () => new OperatorAdminInvalidError(),
);

/**
 * OperatorDelegateAdminInvalid: 'OperatorDelegateAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class OperatorDelegateAdminInvalidError extends Error {
  readonly code: number = 0x7d3;
  readonly name: string = "OperatorDelegateAdminInvalid";
  constructor() {
    super("OperatorDelegateAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, OperatorDelegateAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x7d3,
  () => new OperatorDelegateAdminInvalidError(),
);
createErrorFromNameLookup.set(
  "OperatorDelegateAdminInvalid",
  () => new OperatorDelegateAdminInvalidError(),
);

/**
 * OperatorCooldownNcnFailed: 'OperatorCooldownNcnFailed'
 *
 * @category Errors
 * @category generated
 */
export class OperatorCooldownNcnFailedError extends Error {
  readonly code: number = 0x7d4;
  readonly name: string = "OperatorCooldownNcnFailed";
  constructor() {
    super("OperatorCooldownNcnFailed");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, OperatorCooldownNcnFailedError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x7d4,
  () => new OperatorCooldownNcnFailedError(),
);
createErrorFromNameLookup.set(
  "OperatorCooldownNcnFailed",
  () => new OperatorCooldownNcnFailedError(),
);

/**
 * OperatorVaultTicketFailedCooldown: 'OperatorVaultTicketFailedCooldown'
 *
 * @category Errors
 * @category generated
 */
export class OperatorVaultTicketFailedCooldownError extends Error {
  readonly code: number = 0x7d5;
  readonly name: string = "OperatorVaultTicketFailedCooldown";
  constructor() {
    super("OperatorVaultTicketFailedCooldown");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, OperatorVaultTicketFailedCooldownError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x7d5,
  () => new OperatorVaultTicketFailedCooldownError(),
);
createErrorFromNameLookup.set(
  "OperatorVaultTicketFailedCooldown",
  () => new OperatorVaultTicketFailedCooldownError(),
);

/**
 * OperatorVaultTicketFailedWarmup: 'OperatorVaultTicketFailedWarmup'
 *
 * @category Errors
 * @category generated
 */
export class OperatorVaultTicketFailedWarmupError extends Error {
  readonly code: number = 0x7d6;
  readonly name: string = "OperatorVaultTicketFailedWarmup";
  constructor() {
    super("OperatorVaultTicketFailedWarmup");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, OperatorVaultTicketFailedWarmupError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x7d6,
  () => new OperatorVaultTicketFailedWarmupError(),
);
createErrorFromNameLookup.set(
  "OperatorVaultTicketFailedWarmup",
  () => new OperatorVaultTicketFailedWarmupError(),
);

/**
 * OperatorWarmupNcnFailed: 'OperatorWarmupNcnFailed'
 *
 * @category Errors
 * @category generated
 */
export class OperatorWarmupNcnFailedError extends Error {
  readonly code: number = 0x7d7;
  readonly name: string = "OperatorWarmupNcnFailed";
  constructor() {
    super("OperatorWarmupNcnFailed");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, OperatorWarmupNcnFailedError);
    }
  }
}

createErrorFromCodeLookup.set(0x7d7, () => new OperatorWarmupNcnFailedError());
createErrorFromNameLookup.set(
  "OperatorWarmupNcnFailed",
  () => new OperatorWarmupNcnFailedError(),
);

/**
 * OperatorFeeCapExceeded: 'OperatorFeeCapExceeded'
 *
 * @category Errors
 * @category generated
 */
export class OperatorFeeCapExceededError extends Error {
  readonly code: number = 0x7d8;
  readonly name: string = "OperatorFeeCapExceeded";
  constructor() {
    super("OperatorFeeCapExceeded");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, OperatorFeeCapExceededError);
    }
  }
}

createErrorFromCodeLookup.set(0x7d8, () => new OperatorFeeCapExceededError());
createErrorFromNameLookup.set(
  "OperatorFeeCapExceeded",
  () => new OperatorFeeCapExceededError(),
);

/**
 * NcnOverflow: 'NcnOverflow'
 *
 * @category Errors
 * @category generated
 */
export class NcnOverflowError extends Error {
  readonly code: number = 0x7d9;
  readonly name: string = "NcnOverflow";
  constructor() {
    super("NcnOverflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x7d9, () => new NcnOverflowError());
createErrorFromNameLookup.set("NcnOverflow", () => new NcnOverflowError());

/**
 * OperatorOverflow: 'OperatorOverflow'
 *
 * @category Errors
 * @category generated
 */
export class OperatorOverflowError extends Error {
  readonly code: number = 0x7da;
  readonly name: string = "OperatorOverflow";
  constructor() {
    super("OperatorOverflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, OperatorOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x7da, () => new OperatorOverflowError());
createErrorFromNameLookup.set(
  "OperatorOverflow",
  () => new OperatorOverflowError(),
);

/**
 * VaultOverflow: 'VaultOverflow'
 *
 * @category Errors
 * @category generated
 */
export class VaultOverflowError extends Error {
  readonly code: number = 0x7db;
  readonly name: string = "VaultOverflow";
  constructor() {
    super("VaultOverflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x7db, () => new VaultOverflowError());
createErrorFromNameLookup.set("VaultOverflow", () => new VaultOverflowError());

/**
 * SlasherOverflow: 'SlasherOverflow'
 *
 * @category Errors
 * @category generated
 */
export class SlasherOverflowError extends Error {
  readonly code: number = 0x7dc;
  readonly name: string = "SlasherOverflow";
  constructor() {
    super("SlasherOverflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, SlasherOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x7dc, () => new SlasherOverflowError());
createErrorFromNameLookup.set(
  "SlasherOverflow",
  () => new SlasherOverflowError(),
);

/**
 * InvalidEpochLength: 'InvalidEpochLength'
 *
 * @category Errors
 * @category generated
 */
export class InvalidEpochLengthError extends Error {
  readonly code: number = 0x7dd;
  readonly name: string = "InvalidEpochLength";
  constructor() {
    super("InvalidEpochLength");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidEpochLengthError);
    }
  }
}

createErrorFromCodeLookup.set(0x7dd, () => new InvalidEpochLengthError());
createErrorFromNameLookup.set(
  "InvalidEpochLength",
  () => new InvalidEpochLengthError(),
);

/**
 * ConfigAdminInvalid: 'ConfigAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class ConfigAdminInvalidError extends Error {
  readonly code: number = 0x7de;
  readonly name: string = "ConfigAdminInvalid";
  constructor() {
    super("ConfigAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, ConfigAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x7de, () => new ConfigAdminInvalidError());
createErrorFromNameLookup.set(
  "ConfigAdminInvalid",
  () => new ConfigAdminInvalidError(),
);

/**
 * ArithmeticOverflow: 'ArithmeticOverflow'
 *
 * @category Errors
 * @category generated
 */
export class ArithmeticOverflowError extends Error {
  readonly code: number = 0xbb8;
  readonly name: string = "ArithmeticOverflow";
  constructor() {
    super("ArithmeticOverflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, ArithmeticOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0xbb8, () => new ArithmeticOverflowError());
createErrorFromNameLookup.set(
  "ArithmeticOverflow",
  () => new ArithmeticOverflowError(),
);

/**
 * ArithmeticUnderflow: 'ArithmeticUnderflow'
 *
 * @category Errors
 * @category generated
 */
export class ArithmeticUnderflowError extends Error {
  readonly code: number = 0xbb9;
  readonly name: string = "ArithmeticUnderflow";
  constructor() {
    super("ArithmeticUnderflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, ArithmeticUnderflowError);
    }
  }
}

createErrorFromCodeLookup.set(0xbb9, () => new ArithmeticUnderflowError());
createErrorFromNameLookup.set(
  "ArithmeticUnderflow",
  () => new ArithmeticUnderflowError(),
);

/**
 * DivisionByZero: 'DivisionByZero'
 *
 * @category Errors
 * @category generated
 */
export class DivisionByZeroError extends Error {
  readonly code: number = 0xbba;
  readonly name: string = "DivisionByZero";
  constructor() {
    super("DivisionByZero");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, DivisionByZeroError);
    }
  }
}

createErrorFromCodeLookup.set(0xbba, () => new DivisionByZeroError());
createErrorFromNameLookup.set(
  "DivisionByZero",
  () => new DivisionByZeroError(),
);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code);
  return createError != null ? createError() : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name);
  return createError != null ? createError() : null;
}
