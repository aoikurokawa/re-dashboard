/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category NcnDelegateTokenAccount
 * @category generated
 */
export const NcnDelegateTokenAccountStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number;
}>(
  [["instructionDiscriminator", beet.u8]],
  "NcnDelegateTokenAccountInstructionArgs",
);
/**
 * Accounts required by the _NcnDelegateTokenAccount_ instruction
 *
 * @property [] ncn
 * @property [**signer**] delegateAdmin
 * @property [] tokenMint
 * @property [_writable_] tokenAccount
 * @property [] delegate
 * @category Instructions
 * @category NcnDelegateTokenAccount
 * @category generated
 */
export type NcnDelegateTokenAccountInstructionAccounts = {
  ncn: web3.PublicKey;
  delegateAdmin: web3.PublicKey;
  tokenMint: web3.PublicKey;
  tokenAccount: web3.PublicKey;
  delegate: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
};

export const ncnDelegateTokenAccountInstructionDiscriminator = 22;

/**
 * Creates a _NcnDelegateTokenAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category NcnDelegateTokenAccount
 * @category generated
 */
export function createNcnDelegateTokenAccountInstruction(
  accounts: NcnDelegateTokenAccountInstructionAccounts,
  programId = new web3.PublicKey("RestkWeAVL8fRGgzhfeoqFhsqKRchg6aa1XrcH96z4Q"),
) {
  const [data] = NcnDelegateTokenAccountStruct.serialize({
    instructionDiscriminator: ncnDelegateTokenAccountInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.ncn,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.delegateAdmin,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.delegate,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
