/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category OperatorCooldownNcn
 * @category generated
 */
export const OperatorCooldownNcnStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>(
  [['instructionDiscriminator', beet.u8]],
  'OperatorCooldownNcnInstructionArgs'
)
/**
 * Accounts required by the _OperatorCooldownNcn_ instruction
 *
 * @property [] config
 * @property [] ncn
 * @property [] operator
 * @property [_writable_] ncnOperatorState
 * @property [**signer**] admin
 * @category Instructions
 * @category OperatorCooldownNcn
 * @category generated
 */
export type OperatorCooldownNcnInstructionAccounts = {
  config: web3.PublicKey
  ncn: web3.PublicKey
  operator: web3.PublicKey
  ncnOperatorState: web3.PublicKey
  admin: web3.PublicKey
}

export const operatorCooldownNcnInstructionDiscriminator = 12

/**
 * Creates a _OperatorCooldownNcn_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category OperatorCooldownNcn
 * @category generated
 */
export function createOperatorCooldownNcnInstruction(
  accounts: OperatorCooldownNcnInstructionAccounts,
  programId = new web3.PublicKey('RestkWeAVL8fRGgzhfeoqFhsqKRchg6aa1XrcH96z4Q')
) {
  const [data] = OperatorCooldownNcnStruct.serialize({
    instructionDiscriminator: operatorCooldownNcnInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.config,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.ncn,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.operator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.ncnOperatorState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.admin,
      isWritable: false,
      isSigner: true,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
