/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import { DelegationState, delegationStateBeet } from "../types/DelegationState";

/**
 * Arguments used to create {@link VaultUpdateStateTracker}
 * @category Accounts
 * @category generated
 */
export type VaultUpdateStateTrackerArgs = {
  vault: web3.PublicKey;
  ncnEpoch: beet.bignum;
  lastUpdatedIndex: beet.bignum;
  delegationState: DelegationState;
  withdrawalAllocationMethod: number;
  reserved: number[] /* size: 263 */;
};
/**
 * Holds the data for the {@link VaultUpdateStateTracker} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class VaultUpdateStateTracker implements VaultUpdateStateTrackerArgs {
  private constructor(
    readonly vault: web3.PublicKey,
    readonly ncnEpoch: beet.bignum,
    readonly lastUpdatedIndex: beet.bignum,
    readonly delegationState: DelegationState,
    readonly withdrawalAllocationMethod: number,
    readonly reserved: number[] /* size: 263 */,
  ) {}

  /**
   * Creates a {@link VaultUpdateStateTracker} instance from the provided args.
   */
  static fromArgs(args: VaultUpdateStateTrackerArgs) {
    return new VaultUpdateStateTracker(
      args.vault,
      args.ncnEpoch,
      args.lastUpdatedIndex,
      args.delegationState,
      args.withdrawalAllocationMethod,
      args.reserved,
    );
  }

  /**
   * Deserializes the {@link VaultUpdateStateTracker} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [VaultUpdateStateTracker, number] {
    return VaultUpdateStateTracker.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link VaultUpdateStateTracker} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<VaultUpdateStateTracker> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    );
    if (accountInfo == null) {
      throw new Error(
        `Unable to find VaultUpdateStateTracker account at ${address}`,
      );
    }
    return VaultUpdateStateTracker.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "Vau1t6sLNxnzB7ZDsef8TLbPLfyZMYXH8WTNqUdm9g8",
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(
      programId,
      vaultUpdateStateTrackerBeet,
    );
  }

  /**
   * Deserializes the {@link VaultUpdateStateTracker} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(
    buf: Buffer,
    offset = 0,
  ): [VaultUpdateStateTracker, number] {
    return vaultUpdateStateTrackerBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link VaultUpdateStateTracker} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return vaultUpdateStateTrackerBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link VaultUpdateStateTracker}
   */
  static get byteSize() {
    return vaultUpdateStateTrackerBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link VaultUpdateStateTracker} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      VaultUpdateStateTracker.byteSize,
      commitment,
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link VaultUpdateStateTracker} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === VaultUpdateStateTracker.byteSize;
  }

  /**
   * Returns a readable version of {@link VaultUpdateStateTracker} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      vault: this.vault.toBase58(),
      ncnEpoch: (() => {
        const x = <{ toNumber: () => number }>this.ncnEpoch;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      lastUpdatedIndex: (() => {
        const x = <{ toNumber: () => number }>this.lastUpdatedIndex;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      delegationState: this.delegationState,
      withdrawalAllocationMethod: this.withdrawalAllocationMethod,
      reserved: this.reserved,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const vaultUpdateStateTrackerBeet = new beet.BeetStruct<
  VaultUpdateStateTracker,
  VaultUpdateStateTrackerArgs
>(
  [
    ["vault", beetSolana.publicKey],
    ["ncnEpoch", beet.u64],
    ["lastUpdatedIndex", beet.u64],
    ["delegationState", delegationStateBeet],
    ["withdrawalAllocationMethod", beet.u8],
    ["reserved", beet.uniformFixedSizeArray(beet.u8, 263)],
  ],
  VaultUpdateStateTracker.fromArgs,
  "VaultUpdateStateTracker",
);
