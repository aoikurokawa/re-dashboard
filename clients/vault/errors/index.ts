/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number };
type MaybeErrorWithCode = ErrorWithCode | null | undefined;

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map();
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map();

/**
 * BadEpochLength: 'Bad epoch length'
 *
 * @category Errors
 * @category generated
 */
export class BadEpochLengthError extends Error {
  readonly code: number = 0x0;
  readonly name: string = "BadEpochLength";
  constructor() {
    super("Bad epoch length");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, BadEpochLengthError);
    }
  }
}

createErrorFromCodeLookup.set(0x0, () => new BadEpochLengthError());
createErrorFromNameLookup.set(
  "BadEpochLength",
  () => new BadEpochLengthError(),
);

/**
 * VaultSlashUnderflow: 'VaultSlashUnderflow'
 *
 * @category Errors
 * @category generated
 */
export class VaultSlashUnderflowError extends Error {
  readonly code: number = 0x3e8;
  readonly name: string = "VaultSlashUnderflow";
  constructor() {
    super("VaultSlashUnderflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultSlashUnderflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x3e8, () => new VaultSlashUnderflowError());
createErrorFromNameLookup.set(
  "VaultSlashUnderflow",
  () => new VaultSlashUnderflowError(),
);

/**
 * VaultInitialAmountFailed: 'VaultInitialAmountFailed'
 *
 * @category Errors
 * @category generated
 */
export class VaultInitialAmountFailedError extends Error {
  readonly code: number = 0x3e9;
  readonly name: string = "VaultInitialAmountFailed";
  constructor() {
    super("VaultInitialAmountFailed");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultInitialAmountFailedError);
    }
  }
}

createErrorFromCodeLookup.set(0x3e9, () => new VaultInitialAmountFailedError());
createErrorFromNameLookup.set(
  "VaultInitialAmountFailed",
  () => new VaultInitialAmountFailedError(),
);

/**
 * VaultInsufficientFunds: 'VaultInsufficientFunds'
 *
 * @category Errors
 * @category generated
 */
export class VaultInsufficientFundsError extends Error {
  readonly code: number = 0x3ea;
  readonly name: string = "VaultInsufficientFunds";
  constructor() {
    super("VaultInsufficientFunds");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultInsufficientFundsError);
    }
  }
}

createErrorFromCodeLookup.set(0x3ea, () => new VaultInsufficientFundsError());
createErrorFromNameLookup.set(
  "VaultInsufficientFunds",
  () => new VaultInsufficientFundsError(),
);

/**
 * VaultOverflow: 'VaultOverflow'
 *
 * @category Errors
 * @category generated
 */
export class VaultOverflowError extends Error {
  readonly code: number = 0x3eb;
  readonly name: string = "VaultOverflow";
  constructor() {
    super("VaultOverflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x3eb, () => new VaultOverflowError());
createErrorFromNameLookup.set("VaultOverflow", () => new VaultOverflowError());

/**
 * VaultOperatorAdminInvalid: 'VaultOperatorAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class VaultOperatorAdminInvalidError extends Error {
  readonly code: number = 0x3ec;
  readonly name: string = "VaultOperatorAdminInvalid";
  constructor() {
    super("VaultOperatorAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultOperatorAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x3ec,
  () => new VaultOperatorAdminInvalidError(),
);
createErrorFromNameLookup.set(
  "VaultOperatorAdminInvalid",
  () => new VaultOperatorAdminInvalidError(),
);

/**
 * VaultAdminInvalid: 'VaultAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class VaultAdminInvalidError extends Error {
  readonly code: number = 0x3ed;
  readonly name: string = "VaultAdminInvalid";
  constructor() {
    super("VaultAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x3ed, () => new VaultAdminInvalidError());
createErrorFromNameLookup.set(
  "VaultAdminInvalid",
  () => new VaultAdminInvalidError(),
);

/**
 * VaultCapacityAdminInvalid: 'VaultCapacityAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class VaultCapacityAdminInvalidError extends Error {
  readonly code: number = 0x3ee;
  readonly name: string = "VaultCapacityAdminInvalid";
  constructor() {
    super("VaultCapacityAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultCapacityAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x3ee,
  () => new VaultCapacityAdminInvalidError(),
);
createErrorFromNameLookup.set(
  "VaultCapacityAdminInvalid",
  () => new VaultCapacityAdminInvalidError(),
);

/**
 * VaultMintBurnAdminInvalid: 'VaultMintBurnAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class VaultMintBurnAdminInvalidError extends Error {
  readonly code: number = 0x3ef;
  readonly name: string = "VaultMintBurnAdminInvalid";
  constructor() {
    super("VaultMintBurnAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultMintBurnAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x3ef,
  () => new VaultMintBurnAdminInvalidError(),
);
createErrorFromNameLookup.set(
  "VaultMintBurnAdminInvalid",
  () => new VaultMintBurnAdminInvalidError(),
);

/**
 * VaultDelegationAdminInvalid: 'VaultDelegationAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class VaultDelegationAdminInvalidError extends Error {
  readonly code: number = 0x3f0;
  readonly name: string = "VaultDelegationAdminInvalid";
  constructor() {
    super("VaultDelegationAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultDelegationAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x3f0,
  () => new VaultDelegationAdminInvalidError(),
);
createErrorFromNameLookup.set(
  "VaultDelegationAdminInvalid",
  () => new VaultDelegationAdminInvalidError(),
);

/**
 * VaultDelegateAssetAdminInvalid: 'VaultDelegateAssetAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class VaultDelegateAssetAdminInvalidError extends Error {
  readonly code: number = 0x3f1;
  readonly name: string = "VaultDelegateAssetAdminInvalid";
  constructor() {
    super("VaultDelegateAssetAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultDelegateAssetAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x3f1,
  () => new VaultDelegateAssetAdminInvalidError(),
);
createErrorFromNameLookup.set(
  "VaultDelegateAssetAdminInvalid",
  () => new VaultDelegateAssetAdminInvalidError(),
);

/**
 * VaultCapacityExceeded: 'VaultCapacityExceeded'
 *
 * @category Errors
 * @category generated
 */
export class VaultCapacityExceededError extends Error {
  readonly code: number = 0x3f2;
  readonly name: string = "VaultCapacityExceeded";
  constructor() {
    super("VaultCapacityExceeded");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultCapacityExceededError);
    }
  }
}

createErrorFromCodeLookup.set(0x3f2, () => new VaultCapacityExceededError());
createErrorFromNameLookup.set(
  "VaultCapacityExceeded",
  () => new VaultCapacityExceededError(),
);

/**
 * VaultSlasherAdminInvalid: 'VaultSlasherAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class VaultSlasherAdminInvalidError extends Error {
  readonly code: number = 0x3f3;
  readonly name: string = "VaultSlasherAdminInvalid";
  constructor() {
    super("VaultSlasherAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultSlasherAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x3f3, () => new VaultSlasherAdminInvalidError());
createErrorFromNameLookup.set(
  "VaultSlasherAdminInvalid",
  () => new VaultSlasherAdminInvalidError(),
);

/**
 * VaultNcnAdminInvalid: 'VaultNcnAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class VaultNcnAdminInvalidError extends Error {
  readonly code: number = 0x3f4;
  readonly name: string = "VaultNcnAdminInvalid";
  constructor() {
    super("VaultNcnAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultNcnAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x3f4, () => new VaultNcnAdminInvalidError());
createErrorFromNameLookup.set(
  "VaultNcnAdminInvalid",
  () => new VaultNcnAdminInvalidError(),
);

/**
 * VaultFeeAdminInvalid: 'VaultFeeAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class VaultFeeAdminInvalidError extends Error {
  readonly code: number = 0x3f5;
  readonly name: string = "VaultFeeAdminInvalid";
  constructor() {
    super("VaultFeeAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultFeeAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x3f5, () => new VaultFeeAdminInvalidError());
createErrorFromNameLookup.set(
  "VaultFeeAdminInvalid",
  () => new VaultFeeAdminInvalidError(),
);

/**
 * ConfigAdminInvalid: 'ConfigAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class ConfigAdminInvalidError extends Error {
  readonly code: number = 0x3f6;
  readonly name: string = "ConfigAdminInvalid";
  constructor() {
    super("ConfigAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, ConfigAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x3f6, () => new ConfigAdminInvalidError());
createErrorFromNameLookup.set(
  "ConfigAdminInvalid",
  () => new ConfigAdminInvalidError(),
);

/**
 * ConfigFeeAdminInvalid: 'ConfigFeeAdminInvalid'
 *
 * @category Errors
 * @category generated
 */
export class ConfigFeeAdminInvalidError extends Error {
  readonly code: number = 0x3f7;
  readonly name: string = "ConfigFeeAdminInvalid";
  constructor() {
    super("ConfigFeeAdminInvalid");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, ConfigFeeAdminInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x3f7, () => new ConfigFeeAdminInvalidError());
createErrorFromNameLookup.set(
  "ConfigFeeAdminInvalid",
  () => new ConfigFeeAdminInvalidError(),
);

/**
 * VaultFeeCapExceeded: 'VaultFeeCapExceeded'
 *
 * @category Errors
 * @category generated
 */
export class VaultFeeCapExceededError extends Error {
  readonly code: number = 0x3f8;
  readonly name: string = "VaultFeeCapExceeded";
  constructor() {
    super("VaultFeeCapExceeded");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultFeeCapExceededError);
    }
  }
}

createErrorFromCodeLookup.set(0x3f8, () => new VaultFeeCapExceededError());
createErrorFromNameLookup.set(
  "VaultFeeCapExceeded",
  () => new VaultFeeCapExceededError(),
);

/**
 * VaultFeeChangeTooSoon: 'VaultFeeChangeTooSoon'
 *
 * @category Errors
 * @category generated
 */
export class VaultFeeChangeTooSoonError extends Error {
  readonly code: number = 0x3f9;
  readonly name: string = "VaultFeeChangeTooSoon";
  constructor() {
    super("VaultFeeChangeTooSoon");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultFeeChangeTooSoonError);
    }
  }
}

createErrorFromCodeLookup.set(0x3f9, () => new VaultFeeChangeTooSoonError());
createErrorFromNameLookup.set(
  "VaultFeeChangeTooSoon",
  () => new VaultFeeChangeTooSoonError(),
);

/**
 * VaultFeeBumpTooLarge: 'VaultFeeBumpTooLarge'
 *
 * @category Errors
 * @category generated
 */
export class VaultFeeBumpTooLargeError extends Error {
  readonly code: number = 0x3fa;
  readonly name: string = "VaultFeeBumpTooLarge";
  constructor() {
    super("VaultFeeBumpTooLarge");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultFeeBumpTooLargeError);
    }
  }
}

createErrorFromCodeLookup.set(0x3fa, () => new VaultFeeBumpTooLargeError());
createErrorFromNameLookup.set(
  "VaultFeeBumpTooLarge",
  () => new VaultFeeBumpTooLargeError(),
);

/**
 * VaultUnderflow: 'VaultUnderflow'
 *
 * @category Errors
 * @category generated
 */
export class VaultUnderflowError extends Error {
  readonly code: number = 0x3fb;
  readonly name: string = "VaultUnderflow";
  constructor() {
    super("VaultUnderflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultUnderflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x3fb, () => new VaultUnderflowError());
createErrorFromNameLookup.set(
  "VaultUnderflow",
  () => new VaultUnderflowError(),
);

/**
 * VaultUpdateNeeded: 'VaultUpdateNeeded'
 *
 * @category Errors
 * @category generated
 */
export class VaultUpdateNeededError extends Error {
  readonly code: number = 0x3fc;
  readonly name: string = "VaultUpdateNeeded";
  constructor() {
    super("VaultUpdateNeeded");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultUpdateNeededError);
    }
  }
}

createErrorFromCodeLookup.set(0x3fc, () => new VaultUpdateNeededError());
createErrorFromNameLookup.set(
  "VaultUpdateNeeded",
  () => new VaultUpdateNeededError(),
);

/**
 * VaultIsUpdated: 'VaultIsUpdated'
 *
 * @category Errors
 * @category generated
 */
export class VaultIsUpdatedError extends Error {
  readonly code: number = 0x3fd;
  readonly name: string = "VaultIsUpdated";
  constructor() {
    super("VaultIsUpdated");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultIsUpdatedError);
    }
  }
}

createErrorFromCodeLookup.set(0x3fd, () => new VaultIsUpdatedError());
createErrorFromNameLookup.set(
  "VaultIsUpdated",
  () => new VaultIsUpdatedError(),
);

/**
 * VaultOperatorDelegationUpdateNeeded: 'VaultOperatorDelegationUpdateNeeded'
 *
 * @category Errors
 * @category generated
 */
export class VaultOperatorDelegationUpdateNeededError extends Error {
  readonly code: number = 0x3fe;
  readonly name: string = "VaultOperatorDelegationUpdateNeeded";
  constructor() {
    super("VaultOperatorDelegationUpdateNeeded");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultOperatorDelegationUpdateNeededError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x3fe,
  () => new VaultOperatorDelegationUpdateNeededError(),
);
createErrorFromNameLookup.set(
  "VaultOperatorDelegationUpdateNeeded",
  () => new VaultOperatorDelegationUpdateNeededError(),
);

/**
 * VaultOperatorDelegationIsUpdated: 'VaultOperatorDelegationIsUpdated'
 *
 * @category Errors
 * @category generated
 */
export class VaultOperatorDelegationIsUpdatedError extends Error {
  readonly code: number = 0x3ff;
  readonly name: string = "VaultOperatorDelegationIsUpdated";
  constructor() {
    super("VaultOperatorDelegationIsUpdated");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultOperatorDelegationIsUpdatedError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x3ff,
  () => new VaultOperatorDelegationIsUpdatedError(),
);
createErrorFromNameLookup.set(
  "VaultOperatorDelegationIsUpdated",
  () => new VaultOperatorDelegationIsUpdatedError(),
);

/**
 * VaultUpdateIncorrectIndex: 'VaultUpdateIncorrectIndex'
 *
 * @category Errors
 * @category generated
 */
export class VaultUpdateIncorrectIndexError extends Error {
  readonly code: number = 0x400;
  readonly name: string = "VaultUpdateIncorrectIndex";
  constructor() {
    super("VaultUpdateIncorrectIndex");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultUpdateIncorrectIndexError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x400,
  () => new VaultUpdateIncorrectIndexError(),
);
createErrorFromNameLookup.set(
  "VaultUpdateIncorrectIndex",
  () => new VaultUpdateIncorrectIndexError(),
);

/**
 * VaultUpdateStateNotFinishedUpdating: 'VaultUpdateStateNotFinishedUpdating'
 *
 * @category Errors
 * @category generated
 */
export class VaultUpdateStateNotFinishedUpdatingError extends Error {
  readonly code: number = 0x401;
  readonly name: string = "VaultUpdateStateNotFinishedUpdating";
  constructor() {
    super("VaultUpdateStateNotFinishedUpdating");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultUpdateStateNotFinishedUpdatingError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x401,
  () => new VaultUpdateStateNotFinishedUpdatingError(),
);
createErrorFromNameLookup.set(
  "VaultUpdateStateNotFinishedUpdating",
  () => new VaultUpdateStateNotFinishedUpdatingError(),
);

/**
 * VaultSecurityOverflow: 'VaultSecurityOverflow'
 *
 * @category Errors
 * @category generated
 */
export class VaultSecurityOverflowError extends Error {
  readonly code: number = 0x402;
  readonly name: string = "VaultSecurityOverflow";
  constructor() {
    super("VaultSecurityOverflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultSecurityOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x402, () => new VaultSecurityOverflowError());
createErrorFromNameLookup.set(
  "VaultSecurityOverflow",
  () => new VaultSecurityOverflowError(),
);

/**
 * VaultSlashIncomplete: 'VaultSlashIncomplete'
 *
 * @category Errors
 * @category generated
 */
export class VaultSlashIncompleteError extends Error {
  readonly code: number = 0x403;
  readonly name: string = "VaultSlashIncomplete";
  constructor() {
    super("VaultSlashIncomplete");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultSlashIncompleteError);
    }
  }
}

createErrorFromCodeLookup.set(0x403, () => new VaultSlashIncompleteError());
createErrorFromNameLookup.set(
  "VaultSlashIncomplete",
  () => new VaultSlashIncompleteError(),
);

/**
 * VaultSecurityUnderflow: 'VaultSecurityUnderflow'
 *
 * @category Errors
 * @category generated
 */
export class VaultSecurityUnderflowError extends Error {
  readonly code: number = 0x404;
  readonly name: string = "VaultSecurityUnderflow";
  constructor() {
    super("VaultSecurityUnderflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultSecurityUnderflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x404, () => new VaultSecurityUnderflowError());
createErrorFromNameLookup.set(
  "VaultSecurityUnderflow",
  () => new VaultSecurityUnderflowError(),
);

/**
 * SlippageError: 'SlippageError'
 *
 * @category Errors
 * @category generated
 */
export class SlippageErrorError extends Error {
  readonly code: number = 0x405;
  readonly name: string = "SlippageError";
  constructor() {
    super("SlippageError");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, SlippageErrorError);
    }
  }
}

createErrorFromCodeLookup.set(0x405, () => new SlippageErrorError());
createErrorFromNameLookup.set("SlippageError", () => new SlippageErrorError());

/**
 * VaultStakerWithdrawalTicketNotWithdrawable: 'VaultStakerWithdrawalTicketNotWithdrawable'
 *
 * @category Errors
 * @category generated
 */
export class VaultStakerWithdrawalTicketNotWithdrawableError extends Error {
  readonly code: number = 0x406;
  readonly name: string = "VaultStakerWithdrawalTicketNotWithdrawable";
  constructor() {
    super("VaultStakerWithdrawalTicketNotWithdrawable");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(
        this,
        VaultStakerWithdrawalTicketNotWithdrawableError,
      );
    }
  }
}

createErrorFromCodeLookup.set(
  0x406,
  () => new VaultStakerWithdrawalTicketNotWithdrawableError(),
);
createErrorFromNameLookup.set(
  "VaultStakerWithdrawalTicketNotWithdrawable",
  () => new VaultStakerWithdrawalTicketNotWithdrawableError(),
);

/**
 * VaultNcnSlasherTicketFailedCooldown: 'VaultNcnSlasherTicketFailedCooldown'
 *
 * @category Errors
 * @category generated
 */
export class VaultNcnSlasherTicketFailedCooldownError extends Error {
  readonly code: number = 0x407;
  readonly name: string = "VaultNcnSlasherTicketFailedCooldown";
  constructor() {
    super("VaultNcnSlasherTicketFailedCooldown");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultNcnSlasherTicketFailedCooldownError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x407,
  () => new VaultNcnSlasherTicketFailedCooldownError(),
);
createErrorFromNameLookup.set(
  "VaultNcnSlasherTicketFailedCooldown",
  () => new VaultNcnSlasherTicketFailedCooldownError(),
);

/**
 * VaultNcnSlasherTicketFailedWarmup: 'VaultNcnSlasherTicketFailedWarmup'
 *
 * @category Errors
 * @category generated
 */
export class VaultNcnSlasherTicketFailedWarmupError extends Error {
  readonly code: number = 0x408;
  readonly name: string = "VaultNcnSlasherTicketFailedWarmup";
  constructor() {
    super("VaultNcnSlasherTicketFailedWarmup");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultNcnSlasherTicketFailedWarmupError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x408,
  () => new VaultNcnSlasherTicketFailedWarmupError(),
);
createErrorFromNameLookup.set(
  "VaultNcnSlasherTicketFailedWarmup",
  () => new VaultNcnSlasherTicketFailedWarmupError(),
);

/**
 * VaultNcnTicketFailedCooldown: 'VaultNcnTicketFailedCooldown'
 *
 * @category Errors
 * @category generated
 */
export class VaultNcnTicketFailedCooldownError extends Error {
  readonly code: number = 0x409;
  readonly name: string = "VaultNcnTicketFailedCooldown";
  constructor() {
    super("VaultNcnTicketFailedCooldown");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultNcnTicketFailedCooldownError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x409,
  () => new VaultNcnTicketFailedCooldownError(),
);
createErrorFromNameLookup.set(
  "VaultNcnTicketFailedCooldown",
  () => new VaultNcnTicketFailedCooldownError(),
);

/**
 * VaultNcnTicketFailedWarmup: 'VaultNcnTicketFailedWarmup'
 *
 * @category Errors
 * @category generated
 */
export class VaultNcnTicketFailedWarmupError extends Error {
  readonly code: number = 0x40a;
  readonly name: string = "VaultNcnTicketFailedWarmup";
  constructor() {
    super("VaultNcnTicketFailedWarmup");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultNcnTicketFailedWarmupError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x40a,
  () => new VaultNcnTicketFailedWarmupError(),
);
createErrorFromNameLookup.set(
  "VaultNcnTicketFailedWarmup",
  () => new VaultNcnTicketFailedWarmupError(),
);

/**
 * VaultNcnTicketUnslashable: 'VaultNcnTicketUnslashable'
 *
 * @category Errors
 * @category generated
 */
export class VaultNcnTicketUnslashableError extends Error {
  readonly code: number = 0x40b;
  readonly name: string = "VaultNcnTicketUnslashable";
  constructor() {
    super("VaultNcnTicketUnslashable");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultNcnTicketUnslashableError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x40b,
  () => new VaultNcnTicketUnslashableError(),
);
createErrorFromNameLookup.set(
  "VaultNcnTicketUnslashable",
  () => new VaultNcnTicketUnslashableError(),
);

/**
 * OperatorVaultTicketUnslashable: 'OperatorVaultTicketUnslashable'
 *
 * @category Errors
 * @category generated
 */
export class OperatorVaultTicketUnslashableError extends Error {
  readonly code: number = 0x40c;
  readonly name: string = "OperatorVaultTicketUnslashable";
  constructor() {
    super("OperatorVaultTicketUnslashable");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, OperatorVaultTicketUnslashableError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x40c,
  () => new OperatorVaultTicketUnslashableError(),
);
createErrorFromNameLookup.set(
  "OperatorVaultTicketUnslashable",
  () => new OperatorVaultTicketUnslashableError(),
);

/**
 * NcnOperatorStateUnslashable: 'NcnOperatorStateUnslashable'
 *
 * @category Errors
 * @category generated
 */
export class NcnOperatorStateUnslashableError extends Error {
  readonly code: number = 0x40d;
  readonly name: string = "NcnOperatorStateUnslashable";
  constructor() {
    super("NcnOperatorStateUnslashable");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnOperatorStateUnslashableError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x40d,
  () => new NcnOperatorStateUnslashableError(),
);
createErrorFromNameLookup.set(
  "NcnOperatorStateUnslashable",
  () => new NcnOperatorStateUnslashableError(),
);

/**
 * VaultNcnSlasherTicketUnslashable: 'VaultNcnSlasherTicketUnslashable'
 *
 * @category Errors
 * @category generated
 */
export class VaultNcnSlasherTicketUnslashableError extends Error {
  readonly code: number = 0x40e;
  readonly name: string = "VaultNcnSlasherTicketUnslashable";
  constructor() {
    super("VaultNcnSlasherTicketUnslashable");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultNcnSlasherTicketUnslashableError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x40e,
  () => new VaultNcnSlasherTicketUnslashableError(),
);
createErrorFromNameLookup.set(
  "VaultNcnSlasherTicketUnslashable",
  () => new VaultNcnSlasherTicketUnslashableError(),
);

/**
 * NcnVaultTicketUnslashable: 'NcnVaultTicketUnslashable'
 *
 * @category Errors
 * @category generated
 */
export class NcnVaultTicketUnslashableError extends Error {
  readonly code: number = 0x40f;
  readonly name: string = "NcnVaultTicketUnslashable";
  constructor() {
    super("NcnVaultTicketUnslashable");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnVaultTicketUnslashableError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x40f,
  () => new NcnVaultTicketUnslashableError(),
);
createErrorFromNameLookup.set(
  "NcnVaultTicketUnslashable",
  () => new NcnVaultTicketUnslashableError(),
);

/**
 * NcnVaultSlasherTicketUnslashable: 'NcnVaultSlasherTicketUnslashable'
 *
 * @category Errors
 * @category generated
 */
export class NcnVaultSlasherTicketUnslashableError extends Error {
  readonly code: number = 0x410;
  readonly name: string = "NcnVaultSlasherTicketUnslashable";
  constructor() {
    super("NcnVaultSlasherTicketUnslashable");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnVaultSlasherTicketUnslashableError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x410,
  () => new NcnVaultSlasherTicketUnslashableError(),
);
createErrorFromNameLookup.set(
  "NcnVaultSlasherTicketUnslashable",
  () => new NcnVaultSlasherTicketUnslashableError(),
);

/**
 * VaultMaxSlashedPerOperatorExceeded: 'VaultMaxSlashedPerOperatorExceeded'
 *
 * @category Errors
 * @category generated
 */
export class VaultMaxSlashedPerOperatorExceededError extends Error {
  readonly code: number = 0x411;
  readonly name: string = "VaultMaxSlashedPerOperatorExceeded";
  constructor() {
    super("VaultMaxSlashedPerOperatorExceeded");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultMaxSlashedPerOperatorExceededError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x411,
  () => new VaultMaxSlashedPerOperatorExceededError(),
);
createErrorFromNameLookup.set(
  "VaultMaxSlashedPerOperatorExceeded",
  () => new VaultMaxSlashedPerOperatorExceededError(),
);

/**
 * VaultStakerWithdrawalTicketInvalidStaker: 'VaultStakerWithdrawalTicketInvalidStaker'
 *
 * @category Errors
 * @category generated
 */
export class VaultStakerWithdrawalTicketInvalidStakerError extends Error {
  readonly code: number = 0x412;
  readonly name: string = "VaultStakerWithdrawalTicketInvalidStaker";
  constructor() {
    super("VaultStakerWithdrawalTicketInvalidStaker");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(
        this,
        VaultStakerWithdrawalTicketInvalidStakerError,
      );
    }
  }
}

createErrorFromCodeLookup.set(
  0x412,
  () => new VaultStakerWithdrawalTicketInvalidStakerError(),
);
createErrorFromNameLookup.set(
  "VaultStakerWithdrawalTicketInvalidStaker",
  () => new VaultStakerWithdrawalTicketInvalidStakerError(),
);

/**
 * SlasherOverflow: 'SlasherOverflow'
 *
 * @category Errors
 * @category generated
 */
export class SlasherOverflowError extends Error {
  readonly code: number = 0x413;
  readonly name: string = "SlasherOverflow";
  constructor() {
    super("SlasherOverflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, SlasherOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x413, () => new SlasherOverflowError());
createErrorFromNameLookup.set(
  "SlasherOverflow",
  () => new SlasherOverflowError(),
);

/**
 * NcnOverflow: 'NcnOverflow'
 *
 * @category Errors
 * @category generated
 */
export class NcnOverflowError extends Error {
  readonly code: number = 0x414;
  readonly name: string = "NcnOverflow";
  constructor() {
    super("NcnOverflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NcnOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x414, () => new NcnOverflowError());
createErrorFromNameLookup.set("NcnOverflow", () => new NcnOverflowError());

/**
 * OperatorOverflow: 'OperatorOverflow'
 *
 * @category Errors
 * @category generated
 */
export class OperatorOverflowError extends Error {
  readonly code: number = 0x415;
  readonly name: string = "OperatorOverflow";
  constructor() {
    super("OperatorOverflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, OperatorOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x415, () => new OperatorOverflowError());
createErrorFromNameLookup.set(
  "OperatorOverflow",
  () => new OperatorOverflowError(),
);

/**
 * VaultDelegationZero: 'VaultDelegationZero'
 *
 * @category Errors
 * @category generated
 */
export class VaultDelegationZeroError extends Error {
  readonly code: number = 0x416;
  readonly name: string = "VaultDelegationZero";
  constructor() {
    super("VaultDelegationZero");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultDelegationZeroError);
    }
  }
}

createErrorFromCodeLookup.set(0x416, () => new VaultDelegationZeroError());
createErrorFromNameLookup.set(
  "VaultDelegationZero",
  () => new VaultDelegationZeroError(),
);

/**
 * VaultCooldownZero: 'VaultCooldownZero'
 *
 * @category Errors
 * @category generated
 */
export class VaultCooldownZeroError extends Error {
  readonly code: number = 0x417;
  readonly name: string = "VaultCooldownZero";
  constructor() {
    super("VaultCooldownZero");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultCooldownZeroError);
    }
  }
}

createErrorFromCodeLookup.set(0x417, () => new VaultCooldownZeroError());
createErrorFromNameLookup.set(
  "VaultCooldownZero",
  () => new VaultCooldownZeroError(),
);

/**
 * VaultBurnZero: 'VaultBurnZero'
 *
 * @category Errors
 * @category generated
 */
export class VaultBurnZeroError extends Error {
  readonly code: number = 0x418;
  readonly name: string = "VaultBurnZero";
  constructor() {
    super("VaultBurnZero");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultBurnZeroError);
    }
  }
}

createErrorFromCodeLookup.set(0x418, () => new VaultBurnZeroError());
createErrorFromNameLookup.set("VaultBurnZero", () => new VaultBurnZeroError());

/**
 * VaultEnqueueWithdrawalAmountZero: 'VaultEnqueueWithdrawalAmountZero'
 *
 * @category Errors
 * @category generated
 */
export class VaultEnqueueWithdrawalAmountZeroError extends Error {
  readonly code: number = 0x419;
  readonly name: string = "VaultEnqueueWithdrawalAmountZero";
  constructor() {
    super("VaultEnqueueWithdrawalAmountZero");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultEnqueueWithdrawalAmountZeroError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x419,
  () => new VaultEnqueueWithdrawalAmountZeroError(),
);
createErrorFromNameLookup.set(
  "VaultEnqueueWithdrawalAmountZero",
  () => new VaultEnqueueWithdrawalAmountZeroError(),
);

/**
 * VaultMintZero: 'VaultMintZero'
 *
 * @category Errors
 * @category generated
 */
export class VaultMintZeroError extends Error {
  readonly code: number = 0x41a;
  readonly name: string = "VaultMintZero";
  constructor() {
    super("VaultMintZero");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultMintZeroError);
    }
  }
}

createErrorFromCodeLookup.set(0x41a, () => new VaultMintZeroError());
createErrorFromNameLookup.set("VaultMintZero", () => new VaultMintZeroError());

/**
 * VaultIsPaused: 'VaultIsPaused'
 *
 * @category Errors
 * @category generated
 */
export class VaultIsPausedError extends Error {
  readonly code: number = 0x41b;
  readonly name: string = "VaultIsPaused";
  constructor() {
    super("VaultIsPaused");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultIsPausedError);
    }
  }
}

createErrorFromCodeLookup.set(0x41b, () => new VaultIsPausedError());
createErrorFromNameLookup.set("VaultIsPaused", () => new VaultIsPausedError());

/**
 * InvalidDepositor: 'InvalidDepositor'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDepositorError extends Error {
  readonly code: number = 0x41c;
  readonly name: string = "InvalidDepositor";
  constructor() {
    super("InvalidDepositor");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidDepositorError);
    }
  }
}

createErrorFromCodeLookup.set(0x41c, () => new InvalidDepositorError());
createErrorFromNameLookup.set(
  "InvalidDepositor",
  () => new InvalidDepositorError(),
);

/**
 * InvalidDepositTokenAccount: 'InvalidDepositTokenAccount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDepositTokenAccountError extends Error {
  readonly code: number = 0x41d;
  readonly name: string = "InvalidDepositTokenAccount";
  constructor() {
    super("InvalidDepositTokenAccount");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidDepositTokenAccountError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x41d,
  () => new InvalidDepositTokenAccountError(),
);
createErrorFromNameLookup.set(
  "InvalidDepositTokenAccount",
  () => new InvalidDepositTokenAccountError(),
);

/**
 * NoSupportedMintBalanceChange: 'NoSupportedMintBalanceChange'
 *
 * @category Errors
 * @category generated
 */
export class NoSupportedMintBalanceChangeError extends Error {
  readonly code: number = 0x41e;
  readonly name: string = "NoSupportedMintBalanceChange";
  constructor() {
    super("NoSupportedMintBalanceChange");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NoSupportedMintBalanceChangeError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x41e,
  () => new NoSupportedMintBalanceChangeError(),
);
createErrorFromNameLookup.set(
  "NoSupportedMintBalanceChange",
  () => new NoSupportedMintBalanceChangeError(),
);

/**
 * InvalidEpochLength: 'InvalidEpochLength'
 *
 * @category Errors
 * @category generated
 */
export class InvalidEpochLengthError extends Error {
  readonly code: number = 0x41f;
  readonly name: string = "InvalidEpochLength";
  constructor() {
    super("InvalidEpochLength");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidEpochLengthError);
    }
  }
}

createErrorFromCodeLookup.set(0x41f, () => new InvalidEpochLengthError());
createErrorFromNameLookup.set(
  "InvalidEpochLength",
  () => new InvalidEpochLengthError(),
);

/**
 * VaultRewardFeeDeltaTooLarge: 'VaultRewardFeeDeltaTooLarge'
 *
 * @category Errors
 * @category generated
 */
export class VaultRewardFeeDeltaTooLargeError extends Error {
  readonly code: number = 0x420;
  readonly name: string = "VaultRewardFeeDeltaTooLarge";
  constructor() {
    super("VaultRewardFeeDeltaTooLarge");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultRewardFeeDeltaTooLargeError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x420,
  () => new VaultRewardFeeDeltaTooLargeError(),
);
createErrorFromNameLookup.set(
  "VaultRewardFeeDeltaTooLarge",
  () => new VaultRewardFeeDeltaTooLargeError(),
);

/**
 * VaultRewardFeeIsZero: 'VaultRewardFeeIsZero'
 *
 * @category Errors
 * @category generated
 */
export class VaultRewardFeeIsZeroError extends Error {
  readonly code: number = 0x421;
  readonly name: string = "VaultRewardFeeIsZero";
  constructor() {
    super("VaultRewardFeeIsZero");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VaultRewardFeeIsZeroError);
    }
  }
}

createErrorFromCodeLookup.set(0x421, () => new VaultRewardFeeIsZeroError());
createErrorFromNameLookup.set(
  "VaultRewardFeeIsZero",
  () => new VaultRewardFeeIsZeroError(),
);

/**
 * VrtOutCannotBeZero: 'VrtOutCannotBeZero'
 *
 * @category Errors
 * @category generated
 */
export class VrtOutCannotBeZeroError extends Error {
  readonly code: number = 0x422;
  readonly name: string = "VrtOutCannotBeZero";
  constructor() {
    super("VrtOutCannotBeZero");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, VrtOutCannotBeZeroError);
    }
  }
}

createErrorFromCodeLookup.set(0x422, () => new VrtOutCannotBeZeroError());
createErrorFromNameLookup.set(
  "VrtOutCannotBeZero",
  () => new VrtOutCannotBeZeroError(),
);

/**
 * NonZeroAdditionalAssetsNeededForWithdrawalAtEndOfUpdate: 'NonZeroAdditionalAssetsNeededForWithdrawalAtEndOfUpdate'
 *
 * @category Errors
 * @category generated
 */
export class NonZeroAdditionalAssetsNeededForWithdrawalAtEndOfUpdateError extends Error {
  readonly code: number = 0x423;
  readonly name: string =
    "NonZeroAdditionalAssetsNeededForWithdrawalAtEndOfUpdate";
  constructor() {
    super("NonZeroAdditionalAssetsNeededForWithdrawalAtEndOfUpdate");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(
        this,
        NonZeroAdditionalAssetsNeededForWithdrawalAtEndOfUpdateError,
      );
    }
  }
}

createErrorFromCodeLookup.set(
  0x423,
  () => new NonZeroAdditionalAssetsNeededForWithdrawalAtEndOfUpdateError(),
);
createErrorFromNameLookup.set(
  "NonZeroAdditionalAssetsNeededForWithdrawalAtEndOfUpdate",
  () => new NonZeroAdditionalAssetsNeededForWithdrawalAtEndOfUpdateError(),
);

/**
 * ArithmeticOverflow: 'ArithmeticOverflow'
 *
 * @category Errors
 * @category generated
 */
export class ArithmeticOverflowError extends Error {
  readonly code: number = 0xbb8;
  readonly name: string = "ArithmeticOverflow";
  constructor() {
    super("ArithmeticOverflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, ArithmeticOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0xbb8, () => new ArithmeticOverflowError());
createErrorFromNameLookup.set(
  "ArithmeticOverflow",
  () => new ArithmeticOverflowError(),
);

/**
 * ArithmeticUnderflow: 'ArithmeticUnderflow'
 *
 * @category Errors
 * @category generated
 */
export class ArithmeticUnderflowError extends Error {
  readonly code: number = 0xbb9;
  readonly name: string = "ArithmeticUnderflow";
  constructor() {
    super("ArithmeticUnderflow");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, ArithmeticUnderflowError);
    }
  }
}

createErrorFromCodeLookup.set(0xbb9, () => new ArithmeticUnderflowError());
createErrorFromNameLookup.set(
  "ArithmeticUnderflow",
  () => new ArithmeticUnderflowError(),
);

/**
 * DivisionByZero: 'DivisionByZero'
 *
 * @category Errors
 * @category generated
 */
export class DivisionByZeroError extends Error {
  readonly code: number = 0xbba;
  readonly name: string = "DivisionByZero";
  constructor() {
    super("DivisionByZero");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, DivisionByZeroError);
    }
  }
}

createErrorFromCodeLookup.set(0xbba, () => new DivisionByZeroError());
createErrorFromNameLookup.set(
  "DivisionByZero",
  () => new DivisionByZeroError(),
);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code);
  return createError != null ? createError() : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name);
  return createError != null ? createError() : null;
}
