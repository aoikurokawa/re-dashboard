/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category BurnWithdrawalTicket
 * @category generated
 */
export const BurnWithdrawalTicketStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>(
  [['instructionDiscriminator', beet.u8]],
  'BurnWithdrawalTicketInstructionArgs'
)
/**
 * Accounts required by the _BurnWithdrawalTicket_ instruction
 *
 * @property [] config
 * @property [_writable_] vault
 * @property [_writable_] vaultTokenAccount
 * @property [_writable_] vrtMint
 * @property [_writable_] staker
 * @property [_writable_] stakerTokenAccount
 * @property [_writable_] vaultStakerWithdrawalTicket
 * @property [_writable_] vaultStakerWithdrawalTicketTokenAccount
 * @property [_writable_] vaultFeeTokenAccount
 * @property [_writable_] programFeeTokenAccount
 * @property [**signer**] burnSigner (optional)
 * @category Instructions
 * @category BurnWithdrawalTicket
 * @category generated
 */
export type BurnWithdrawalTicketInstructionAccounts = {
  config: web3.PublicKey
  vault: web3.PublicKey
  vaultTokenAccount: web3.PublicKey
  vrtMint: web3.PublicKey
  staker: web3.PublicKey
  stakerTokenAccount: web3.PublicKey
  vaultStakerWithdrawalTicket: web3.PublicKey
  vaultStakerWithdrawalTicketTokenAccount: web3.PublicKey
  vaultFeeTokenAccount: web3.PublicKey
  programFeeTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  burnSigner?: web3.PublicKey
}

export const burnWithdrawalTicketInstructionDiscriminator = 14

/**
 * Creates a _BurnWithdrawalTicket_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category BurnWithdrawalTicket
 * @category generated
 */
export function createBurnWithdrawalTicketInstruction(
  accounts: BurnWithdrawalTicketInstructionAccounts,
  programId = new web3.PublicKey('Vau1t6sLNxnzB7ZDsef8TLbPLfyZMYXH8WTNqUdm9g8')
) {
  const [data] = BurnWithdrawalTicketStruct.serialize({
    instructionDiscriminator: burnWithdrawalTicketInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.config,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vaultTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vrtMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.staker,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakerTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vaultStakerWithdrawalTicket,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vaultStakerWithdrawalTicketTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vaultFeeTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.programFeeTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.burnSigner ?? programId,
      isWritable: false,
      isSigner: accounts.burnSigner != null,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
