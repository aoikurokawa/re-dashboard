/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitializeVault
 * @category generated
 */
export type InitializeVaultInstructionArgs = {
  depositFeeBps: number
  withdrawalFeeBps: number
  rewardFeeBps: number
  decimals: number
  initializeTokenAmount: beet.bignum
}
/**
 * @category Instructions
 * @category InitializeVault
 * @category generated
 */
export const InitializeVaultStruct = new beet.BeetArgsStruct<
  InitializeVaultInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['depositFeeBps', beet.u16],
    ['withdrawalFeeBps', beet.u16],
    ['rewardFeeBps', beet.u16],
    ['decimals', beet.u8],
    ['initializeTokenAmount', beet.u64],
  ],
  'InitializeVaultInstructionArgs'
)
/**
 * Accounts required by the _InitializeVault_ instruction
 *
 * @property [_writable_] config
 * @property [_writable_] vault
 * @property [_writable_, **signer**] vrtMint
 * @property [] stMint
 * @property [_writable_] adminStTokenAccount
 * @property [_writable_] vaultStTokenAccount
 * @property [] burnVault
 * @property [_writable_] burnVaultVrtTokenAccount
 * @property [_writable_, **signer**] admin
 * @property [**signer**] base
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category InitializeVault
 * @category generated
 */
export type InitializeVaultInstructionAccounts = {
  config: web3.PublicKey
  vault: web3.PublicKey
  vrtMint: web3.PublicKey
  stMint: web3.PublicKey
  adminStTokenAccount: web3.PublicKey
  vaultStTokenAccount: web3.PublicKey
  burnVault: web3.PublicKey
  burnVaultVrtTokenAccount: web3.PublicKey
  admin: web3.PublicKey
  base: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
}

export const initializeVaultInstructionDiscriminator = 1

/**
 * Creates a _InitializeVault_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeVault
 * @category generated
 */
export function createInitializeVaultInstruction(
  accounts: InitializeVaultInstructionAccounts,
  args: InitializeVaultInstructionArgs,
  programId = new web3.PublicKey('Vau1t6sLNxnzB7ZDsef8TLbPLfyZMYXH8WTNqUdm9g8')
) {
  const [data] = InitializeVaultStruct.serialize({
    instructionDiscriminator: initializeVaultInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.config,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vrtMint,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.stMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.adminStTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vaultStTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.burnVault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.burnVaultVrtTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.base,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
