/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SetAdmin
 * @category generated
 */
export const SetAdminStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>([['instructionDiscriminator', beet.u8]], 'SetAdminInstructionArgs')
/**
 * Accounts required by the _SetAdmin_ instruction
 *
 * @property [] config
 * @property [_writable_] vault
 * @property [**signer**] oldAdmin
 * @property [**signer**] newAdmin
 * @category Instructions
 * @category SetAdmin
 * @category generated
 */
export type SetAdminInstructionAccounts = {
  config: web3.PublicKey
  vault: web3.PublicKey
  oldAdmin: web3.PublicKey
  newAdmin: web3.PublicKey
}

export const setAdminInstructionDiscriminator = 21

/**
 * Creates a _SetAdmin_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category SetAdmin
 * @category generated
 */
export function createSetAdminInstruction(
  accounts: SetAdminInstructionAccounts,
  programId = new web3.PublicKey('Vau1t6sLNxnzB7ZDsef8TLbPLfyZMYXH8WTNqUdm9g8')
) {
  const [data] = SetAdminStruct.serialize({
    instructionDiscriminator: setAdminInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.config,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.oldAdmin,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.newAdmin,
      isWritable: false,
      isSigner: true,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
