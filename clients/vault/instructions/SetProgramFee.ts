/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SetProgramFee
 * @category generated
 */
export type SetProgramFeeInstructionArgs = {
  newFeeBps: number
}
/**
 * @category Instructions
 * @category SetProgramFee
 * @category generated
 */
export const SetProgramFeeStruct = new beet.BeetArgsStruct<
  SetProgramFeeInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['newFeeBps', beet.u16],
  ],
  'SetProgramFeeInstructionArgs'
)
/**
 * Accounts required by the _SetProgramFee_ instruction
 *
 * @property [_writable_] config
 * @property [**signer**] admin
 * @category Instructions
 * @category SetProgramFee
 * @category generated
 */
export type SetProgramFeeInstructionAccounts = {
  config: web3.PublicKey
  admin: web3.PublicKey
}

export const setProgramFeeInstructionDiscriminator = 17

/**
 * Creates a _SetProgramFee_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetProgramFee
 * @category generated
 */
export function createSetProgramFeeInstruction(
  accounts: SetProgramFeeInstructionAccounts,
  args: SetProgramFeeInstructionArgs,
  programId = new web3.PublicKey('Vau1t6sLNxnzB7ZDsef8TLbPLfyZMYXH8WTNqUdm9g8')
) {
  const [data] = SetProgramFeeStruct.serialize({
    instructionDiscriminator: setProgramFeeInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.config,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.admin,
      isWritable: false,
      isSigner: true,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
