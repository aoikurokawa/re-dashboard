/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpdateTokenMetadata
 * @category generated
 */
export type UpdateTokenMetadataInstructionArgs = {
  name: string
  symbol: string
  uri: string
}
/**
 * @category Instructions
 * @category UpdateTokenMetadata
 * @category generated
 */
export const UpdateTokenMetadataStruct = new beet.FixableBeetArgsStruct<
  UpdateTokenMetadataInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['name', beet.utf8String],
    ['symbol', beet.utf8String],
    ['uri', beet.utf8String],
  ],
  'UpdateTokenMetadataInstructionArgs'
)
/**
 * Accounts required by the _UpdateTokenMetadata_ instruction
 *
 * @property [] vault
 * @property [**signer**] admin
 * @property [] vrtMint
 * @property [_writable_] metadata
 * @property [] mplTokenMetadataProgram
 * @category Instructions
 * @category UpdateTokenMetadata
 * @category generated
 */
export type UpdateTokenMetadataInstructionAccounts = {
  vault: web3.PublicKey
  admin: web3.PublicKey
  vrtMint: web3.PublicKey
  metadata: web3.PublicKey
  mplTokenMetadataProgram: web3.PublicKey
}

export const updateTokenMetadataInstructionDiscriminator = 30

/**
 * Creates a _UpdateTokenMetadata_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateTokenMetadata
 * @category generated
 */
export function createUpdateTokenMetadataInstruction(
  accounts: UpdateTokenMetadataInstructionAccounts,
  args: UpdateTokenMetadataInstructionArgs,
  programId = new web3.PublicKey('Vau1t6sLNxnzB7ZDsef8TLbPLfyZMYXH8WTNqUdm9g8')
) {
  const [data] = UpdateTokenMetadataStruct.serialize({
    instructionDiscriminator: updateTokenMetadataInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.vault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.admin,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.vrtMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mplTokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
